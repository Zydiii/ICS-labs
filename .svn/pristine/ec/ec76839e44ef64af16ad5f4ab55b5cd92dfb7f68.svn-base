#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Zhang Yuandi
# 517030910230
# Describe how and why you modified the baseline code.
# 1. use iaddq -> Average CPE	12.70
# 2. loop unrolling 8 -> Average CPE	9.16
# 3. loop unrolling 8 4 2 1 -> Average CPE	9.00
# 4. loop unrolling >=8 -> >=4 -> >=2 -> 1  Remove unnecessary parts of jump -> Average CPE	8.24
# 5. reduce the total time of using iaddq by changing order -> Average CPE	8.01
# 6. improve add by avoiding repeated iaddq $1,%rax  ->  Average CPE	7.87
# 7. improve the remaining part  -> Average CPE		7.69
# 8. remove xorq %rax,%rax  ->  Average CPE	7.64
# 9. 
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

    iaddq $-8, %rdx
    jl Remain

unrollingLoop8:
    mrmovq (%rdi),%r8
    mrmovq 0x8(%rdi),%r9
    mrmovq 0x10(%rdi),%r10
    mrmovq 0x18(%rdi),%r11
    mrmovq 0x20(%rdi),%r12
    mrmovq 0x28(%rdi),%r13
    mrmovq 0x30(%rdi),%r14
    mrmovq 0x38(%rdi),%rcx

	andq %r8, %r8		# val <= 0?
	jle Eight_0		    # 
#1
Eight_1:
    andq %r9, %r9
    jle Eight_01
Eight_11:
    andq %r10, %r10
    jle Eight_011
Eight_111:
    andq %r11, %r11
    jle Eight_0111
Eight_1111:
    andq %r12, %r12
    jle Eight_01111
Eight_11111:
    andq %r13, %r13
    jle Eight_011111
Eight_111111:
    andq %r14, %r14
    jle Eight_0111111
Eight_1111111:
    andq %rcx, %rcx
    jle count7 
    iaddq $8, %rax
    jmp Eight8

count7:
    iaddq $7, %rax
    jmp Eight8
#2
Eight_0:
    andq %r9, %r9
    jle Eight_00
Eight_01:
    andq %r10, %r10
    jle Eight_001
Eight_011:
    andq %r11, %r11
    jle Eight_0011
Eight_0111:
    andq %r12, %r12
    jle Eight_00111
Eight_01111:
    andq %r13, %r13
    jle Eight_001111
Eight_011111:
    andq %r14, %r14
    jle Eight_0011111
Eight_0111111:
    andq %rcx, %rcx 
    jg count7
count6:
    iaddq $6, %rax
    jmp Eight8
#3
Eight_00:
    andq %r10, %r10
    jle Eight_000
Eight_001:
    andq %r11, %r11
    jle Eight_0001
Eight_0011:
    andq %r12, %r12
    jle Eight_00011
Eight_00111:
    andq %r13, %r13
    jle Eight_000111
Eight_001111:
    andq %r14, %r14
    jle Eight_0001111
Eight_0011111:
    andq %rcx, %rcx
    jg count6
count5:
    iaddq $5, %rax
    jmp Eight8
#4
Eight_000:
    andq %r11, %r11
    jle Eight_0000
Eight_0001:
    andq %r12, %r12
    jle Eight_00001
Eight_00011:
    andq %r13, %r13
    jle Eight_000011
Eight_000111:
    andq %r14, %r14
    jle Eight_0000111
Eight_0001111:
    andq %rcx, %rcx
    jg count5
count4:
    iaddq $4, %rax
    jmp Eight8
#5
Eight_0000:
    andq %r12, %r12
    jle Eight_00000
Eight_00001:
    andq %r13, %r13
    jle Eight_000001
Eight_000011:
    andq %r14, %r14
    jle Eight_0000011
Eight_0000111:
    andq %rcx, %rcx
    jg count4
count3:
    iaddq $3, %rax
    jmp Eight8
#6
Eight_00000:
    andq %r13, %r13
    jle Eight_000000
Eight_000001:
    andq %r14, %r14
    jle Eight_0000001
Eight_0000011:
    andq %rcx, %rcx
    jg count3
count2:
    iaddq $2, %rax
    jmp Eight8
#7
Eight_000000:
    andq %r14, %r14
    jle Eight_0000000
Eight_0000001:
    andq %rcx, %rcx
    jg count2
count1:
    iaddq $1, %rax
    jmp Eight8
#8
Eight_0000000:
    andq %rcx, %rcx
    jg count1

Eight8:
    rmmovq %r8,(%rsi)
    rmmovq %r9,0x8(%rsi)
    rmmovq %r10,0x10(%rsi)
    rmmovq %r11,0x18(%rsi)
    rmmovq %r12,0x20(%rsi)
    rmmovq %r13,0x28(%rsi)
    rmmovq %r14,0x30(%rsi)
    rmmovq %rcx,0x38(%rsi)
    
	iaddq $64, %rdi		# src += 64
	iaddq $64, %rsi		# dst += 64
    iaddq $-8, %rdx
    jge unrollingLoop8

Remain:
	iaddq $6, %rdx
	jl Final

Remain_Loop:
	mrmovq (%rdi), %r8
	mrmovq 8(%rdi), %r9

	andq %r8, %r8
	jle R2
	iaddq $1, %rax
R2:
	andq %r9, %r9
	jle Remain_Npos
	iaddq $1, %rax

Remain_Npos:
	rmmovq %r8, (%rsi)
	rmmovq %r9, 8(%rsi)
	iaddq $16, %rdi
	iaddq $16, %rsi
	iaddq $-2, %rdx
	jge Remain_Loop

# %rdx = 01
Final:
	iaddq $1, %rdx
	jl Done

    mrmovq (%rdi), %r10
	andq %r10, %r10
    rmmovq %r10, (%rsi)
    jle Done
    iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function

End:
#/* $end ncopy-ys */
