#  Zhang Yuandi
# 517030910230

# Execution begins at address 0
    .pos 0
	irmovq stack,%rsp                 # Set up stack pointer
    call main                         # Execute main program
    halt                              # Terminate program

# Sample linked list
	.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0

main:
	irmovq ele1, %rdi                 # ls in %rdi
	call rsum_list                    # Call rsum_list
	ret                               # Return


# long rsum_list(list_ptr ls)
# start address in %rdi
rsum_list:
	xorq %rax,%rax                    # val = 0
	andq %rdi,%rdi		              # Set CC
	jle   return		              # If (!ls) return 0
	pushq %rbx		                  # Store val in callee-saved register
	mrmovq (%rdi),%rbx	              # Get ls->val	
	mrmovq 0x8(%rdi),%rdi	          # ls = ls->next
	call rsum_list			          # Caculate rest
	addq %rbx,%rax		              # rest + val
	popq %rbx		                  # Restore %rbx
return:
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:

