# Zhang Yuandi
# 517030910230

# Execution begins at address 0
    .pos 0
	irmovq stack,%rsp                 # Set up stack pointer
    call main                         # Execute main program
    halt                              # Terminate program

.align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main: 	
    irmovq src,%rdi                   # src in %rdi        
	irmovq dest,%rsi                  # dest in %rsi
	irmovq $3,%rdx                    # len in %rdx
	call copy_block		              # Call copy_block
	ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy_block:	
	xorq %rax,%rax		              # result = 0
    irmovq $8,%r8	                  # Constant 8
	irmovq $1,%r9		              # Constant 1
	jmp 	test  		              # Goto test
loop:
	mrmovq (%rdi),%r10	              # Get val
    addq %r8,%rdi		              # src++
	rmmovq %r10,(%rsi)	              # Set dest
    addq %r8,%rsi		              # dest++
	xorq %r10,%rax		              # result ^= val
	subq %r9,%rdx		              # len--
test: 	
    andq %rdx,%rdx		              # Set CC
    jne		loop	                 # Stop when 0
    ret                              # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
